services:
  traefik:
    image: "traefik:v3.2"
    container_name: "traefik"

    command:
      - "--log.level=INFO"  # logging levels are TRACE, DEBUG, INFO, WARN, ERROR, FATAL, and PANIC.
      - "--api.dashboard=true"
      # - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"

      - "--entrypoints.web.address=:80"

      # Bloque letsencrypt
      - "--entrypoints.web.http.redirections.entrypoint.to=websecure"
      - "--entrypoints.web.http.redirections.entrypoint.scheme=https"
      - "--entryPoints.websecure.address=:443"

      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=mvilmag028@fp.iesromerovargas.com"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"

      ## La línea comentada --certificatesresolvers.myresolver.acme.caserver apunta al entorno de pruebas de ## Let's Encrypt. Esto es útil para evitar límites de emisión durante las pruebas.
      # # - "--certificatesresolvers.myresolver.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory"

    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.rule=Host(`martavm.tech`)"
      - "traefik.http.routers.traefik.service=api@internal"

      - "traefik.http.routers.traefik.entrypoints=websecure"
      - "traefik.http.routers.traefik.tls.certresolver=myresolver"
      # Añade autenticación test/test
      - "traefik.http.routers.traefik.middlewares=myauth"
      - "traefik.http.middlewares.myauth.basicauth.users=test:$$apr1$$H6uskkkW$$IgXLP6ewTrSuBkTrqE8wj/"

    ports:
      - "443:443"
      - "8080:8080"
      # - "8000:8000"
      - "80:80"
    volumes:
      - "./letsencrypt:/letsencrypt"
      - "/var/run/docker.sock:/var/run/docker.sock:ro"

  whoami:
    image: "traefik/whoami"
    container_name: "whoami"
    labels:
      - "traefik.enable=true"
      # Usar cada uno SU DOMINIO .tech
      - "traefik.http.routers.whoami.rule=Host(`whoami.martavm.tech`)"
      - "traefik.http.routers.whoami.entrypoints=websecure"
      - "traefik.http.routers.whoami.tls.certresolver=myresolver"

  web:
    image: ${IMAGE}
    container_name: django_web
    #ports:
    #  - "8000:8000"
    volumes:
      - .:/app
      - ./static:/static
    env_file:
      - .env
    depends_on:
      - db
      - mailpit
    command: gunicorn proyecto_control_menstrual_hormonal.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 2
    restart: unless-stopped  # Asegura que el contenedor se reinicie si falla
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.web.rule=Host(`moiraflow.martavm.tech`)"
      - "traefik.http.routers.web.entrypoints=websecure"
      - "traefik.http.routers.web.tls.certresolver=myresolver"
      - "traefik.http.services.web.loadbalancer.server.port=8000"

  db:
    image: postgres:16
    container_name: postgres_db
    #ports:
    #  - "5432:5432"
    env_file:
      - .env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    restart: unless-stopped

  mailpit:
    image: axllent/mailpit
    container_name: mailpit
    volumes:
      - ./data:/data
    ports:
      - "8025:8025"
      - "1025:1025" # SMTP de prueba
    env_file:
      - .env
    restart: unless-stopped
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.mailpit.rule=Host(`mailpit.martavm.tech`)"
      - "traefik.http.routers.mailpit.entrypoints=websecure"
      - "traefik.http.routers.mailpit.tls.certresolver=myresolver"
      - "traefik.http.services.mailpit.loadbalancer.server.port=8025"


  redis:
    image: redis:7
    # ports:
    #  - "6379:6379"

  celery:
    image: ${IMAGE}
    command: celery -A ArenaGG worker --loglevel=info
    volumes:
      - .:/app
    depends_on:
      - web
      - redis
    env_file:
      - .env

  celery-beat:
    image: ${IMAGE}
    command: celery -A ArenaGG beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler
    volumes:
      - .:/app
    depends_on:
      - web
      - redis
    env_file:
      - .env

volumes:
  postgres_data: